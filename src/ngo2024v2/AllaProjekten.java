/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ngo2024v2;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import oru.inf.InfDB;
import oru.inf.InfException;


/**
 *
 * @author hampusdaven
 */
public class AllaProjekten extends javax.swing.JFrame {
     private InfDB idb;
    private String InloggadAdmin;
    private JList<String> projektLista;
    private ArrayList<HashMap<String, String>> listaProjekt;

    /**
     * Creates new form AllaProjekten
     */
    public AllaProjekten(InfDB idb, String InloggadAdmin) {
        initComponents();
        this.idb = idb;
        this.InloggadAdmin = InloggadAdmin;
        
        fyllProjektLista();
        
    }

     private void fyllProjektLista(){
        try {
            // Hämta projekten där den inloggade användaren är projektchef
            String sqlFragaProjekt = "SELECT * FROM projekt";
            listaProjekt = idb.fetchRows(sqlFragaProjekt);

            // Skapa en modell för listan
            DefaultListModel<String> model = new DefaultListModel<>();
            
           
            // Loopa igenom resultaten och lägg till dem i listmodellen
            if (listaProjekt != null) {
            for (HashMap<String, String> rad : listaProjekt) {
                // Skapa en sträng med HTML-formatering för varje projekt
                String htmlFormattedItem = "<html><font color='gray'><b>Projekt Namn:</b></font> " + rad.get("projektnamn") + "<br>"
                                          + "<font color='gray'><b>Startdatum:</b></font> " + rad.get("startdatum") + "<br>"
                                          + "<font color='gray'><b>Slutdatum:</b></font> " + rad.get("slutdatum") + "<br>"
                                          + "<font color='gray'><b>Beskrivning:</b></font> " + rad.get("beskrivning") + "<br>"
                                          + "<font color='gray'><b>Kostnad:</b></font> " + rad.get("kostnad") + "<br>"
                                          + "<font color='gray'><b>Status:</b></font> " + rad.get("status") + "<br>"
                                          + "<font color='gray'><b>Prioritet:</b></font> " + rad.get("prioritet") + "<br>"
                                          + "<font color='gray'><b>Land:</b></font> " + rad.get("land") + "</html>";
                model.addElement(htmlFormattedItem);
            }
            } else {
                model.addElement("Inga projekt hittades.");
            }
             // Skapa en JList med modellen
            projektLista = new JList<>(model);

            // Lägg till JList till en JScrollPane för att göra det möjligt att rulla
            JScrollPane scrollPane = new JScrollPane(projektLista);
            scrollPane.setBounds(20, 40, 500, 300); // Ange position och storlek för JScrollPane

            // Lägg till JScrollPane till JFrame
            getContentPane().add(scrollPane);

        } catch (InfException ex) {
            System.out.println(ex.getMessage());
        }
        
         this.setVisible(true);
     }
     
 private void gatilladminmeny() {
        this.dispose();
        AdminMeny AdminMenyFönster = new AdminMeny(idb, InloggadAdmin);
        AdminMenyFönster.setVisible(true);
    }
    
 
 
 
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnLaggtill = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Alla Projekt");

        jButton1.setText("Gå tillbaka");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Ändra");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Radera");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        btnLaggtill.setText("Lägg till");
        btnLaggtill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLaggtillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLaggtill)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(btnLaggtill))
                .addContainerGap(271, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       int selectedIndex = projektLista.getSelectedIndex();
        if (selectedIndex != -1 && listaProjekt != null) {
            HashMap<String, String> selectedProjekt = listaProjekt.get(selectedIndex);
            ÄndraProjektUppgifter newÄndraProjektUppgifter = new ÄndraProjektUppgifter(idb, selectedProjekt);
            newÄndraProjektUppgifter.setVisible(true);
        } else {
            System.out.println("Vänligen välj ett projekt att redigera.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       gatilladminmeny();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnLaggtillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLaggtillActionPerformed
       LäggtillProjekt LäggtillProjektFönster = new LäggtillProjekt(idb, InloggadAdmin);
       
       LäggtillProjektFönster.setVisible(true);
       this.setVisible(false);
       
    }//GEN-LAST:event_btnLaggtillActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int selectedIndex = projektLista.getSelectedIndex();
    if (selectedIndex != -1 && selectedIndex < listaProjekt.size()) {
        HashMap<String, String> selectedProjekt = listaProjekt.get(selectedIndex);
        String pid = selectedProjekt.get("pid");

        try {
            String sqlRaderaprojektpartner = "DELETE FROM projekt_partner WHERE pid = '" + pid + "'";
            idb.delete(sqlRaderaprojektpartner);

            // Radera från ans_proj där projektet är med
            String sqlRaderaAnsproj = "DELETE FROM ans_proj WHERE pid = '" + pid + "'";
            idb.delete(sqlRaderaAnsproj);

            // Radera från proj_hallbarhet där projektet är med
            String sqlRaderaProjhallbarhet = "DELETE FROM proj_hallbarhet WHERE pid = '" + pid + "'";
            idb.delete(sqlRaderaProjhallbarhet);

            // Radera från partner där projektet är med
            String sqlRaderapartner = "DELETE FROM partner WHERE pid = '2" + pid + "'";
            idb.delete(sqlRaderapartner);

            // Slutligen, radera själva projektet från projekt-tabellen
            String sqlRaderaProjekt = "DELETE FROM projekt WHERE pid = '" + pid + "'";
            idb.delete(sqlRaderaProjekt);

            // Ta bort det valda projektet från listan i applikationen
            listaProjekt.remove(selectedIndex);

            // Uppdatera JList
            DefaultListModel<String> model = (DefaultListModel<String>) projektLista.getModel();
            model.removeElementAt(selectedIndex);

            System.out.println("Projektet har raderats.");
        } catch (InfException ex) {
            System.out.println("Ett fel uppstod vid radering av projekt: " + ex.getMessage());
        }
    } else {
        System.out.println("Vänligen välj ett projekt att radera.");
    }
    
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AllaProjekten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AllaProjekten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AllaProjekten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AllaProjekten.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new AllaProjekten().setVisible(true);
            }
        });
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLaggtill;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
